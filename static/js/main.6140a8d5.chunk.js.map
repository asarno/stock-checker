{"version":3,"sources":["components/styled/index.tsx","components/Loader.tsx","hooks/media-queries.ts","components/Stock/Graph.tsx","components/Stock/Item.tsx","components/Stock/Card.tsx","api/index.ts","api/stocks.ts","hooks/stocks.ts","components/Stock/index.tsx","components/Search.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["Container","styled","div","FlexRow","FlexColumn","props","isFullscreen","StyledLoader","BounceLoader","center","Loader","isLoading","color","size","loading","useIsMobile","useState","width","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","Graph","data","isValid","timeLength","setTimeLength","lineData","time","endIndex","slice","transformData","isMobile","Tabs","value","indicatorColor","textColor","onChange","event","newValue","style","marginTop","marginBottom","Tab","label","margin","top","right","left","bottom","strokeDasharray","dataKey","type","stroke","activeDot","r","Label","span","Text","Item","text","Card","info","name","symbol","industry","marketCap","peRatio","profitMargin","sharesOutstanding","targetPrice","authedFetcher","axios","create","baseURL","process","transformPricingData","Object","keys","map","day","currentDay","open","parseInt","close","getPrices","a","get","status","assert","equal","getInfo","Note","alert","Symbol","Name","description","Description","Industry","MarketCapitalization","ebitda","EBITDA","PERatio","ProfitMargin","AnalystTargetPrice","annualHigh","annualLow","SharesOutstanding","Promise","all","resData","pricing","useStock","useSWR","getStock","error","Stock","className","initialState","Search","setSelectedStock","Autocomplete","options","getOptionLabel","option","position","disableClearable","renderInput","params","TextField","variant","App","stock","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.6140a8d5.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Container = styled.div`\n    width: 100vw;\n    height: 100vh;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n`;\n\nconst FlexRow = styled.div`\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n    width: 100%;\n    flex-wrap: wrap;\n`;\n\nconst FlexColumn = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n`;\n\nexport {\n    FlexRow,\n    FlexColumn,\n    Container,\n}\n","import * as React from 'react';\nimport styled from 'styled-components';\nimport { BounceLoader } from \"react-spinners\";\n\nconst Container: any = styled.div`\n    height: ${(props: any) => props.isFullscreen ? '50vh' : 'auto'};\n    z-index: 11;\n`;\n\nconst StyledLoader = styled(BounceLoader)`\n\tdisplay: block;\n\tmargin: ${(props: any) => (props.center ? \"auto\" : 0)};\n`;\n\ninterface Props {\n    isLoading: boolean;\n    isFullscreen?: boolean;\n    color?: string;\n    size?: number;\n}\n\nconst Loader = ({\n    isLoading,\n    isFullscreen = false,\n    color = '#1872e0',\n    size = 50,\n}: Props) => (\n        <Container\n            isFullscreen={isFullscreen}\n        >\n            <StyledLoader\n                color={color}\n                size={size}\n                loading={isLoading}\n            />\n        </Container>\n    )\n\nexport default Loader;","import { useState, useEffect } from \"react\";\n\nexport function useIsMobile() {\n  // Initialize state with undefined width/height so server and client renders match\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n  const [windowSize, setWindowSize] = useState({\n    width: 0,\n    height: 0,\n  });\n\n  useEffect(() => {\n    // Handler to call on window resize\n    function handleResize() {\n      // Set window width/height to state\n      setWindowSize({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }\n    \n    // Add event listener\n    window.addEventListener(\"resize\", handleResize);\n    \n    // Call handler right away so state gets updated with initial window size\n    handleResize();\n    \n    // Remove event listener on cleanup\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []); // Empty array ensures that effect is only run on mount\n\n  return windowSize.width < 500;\n}","import React, { useState } from 'react';\nimport { useIsMobile } from '../../hooks/media-queries';\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\nimport { DayPrice } from '../../api/stocks';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\n\ninterface Props {\n    data?: DayPrice[];\n    isValid: boolean;\n}\n\n\n// This function breaks up pricing data into 1 week, 1 month, & 3 months\n// Disclaimer - would normally use moment or some other calendar library for exact dates, but for the purpose of this demo, I assumed months were 30 days.\nfunction transformData(data: any, time: number) {\n    let newData = data;\n    const endIndex = time === 0 ? 7 : time === 1 ? 30 : 90;\n    newData = data.slice(0, endIndex);\n    return newData;\n}\n\nconst Graph: React.FC<Props> = ({ data, isValid }) => {\n    const [timeLength, setTimeLength] = useState(0);\n\n    const lineData = isValid ? transformData(data, timeLength) : [];\n\n    const isMobile = useIsMobile();\n\n    function handleChange(event: React.ChangeEvent<{}>, newValue: number) {\n        setTimeLength(newValue);\n    };\n\n    return (\n        <>\n            <Tabs\n                value={timeLength}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                onChange={handleChange}\n                style={{\n                    marginTop: '1rem',\n                    marginBottom: '1rem',\n                }}\n            >\n                <Tab label=\"1W\" />\n                <Tab label=\"1M\" />\n                <Tab label=\"3M\" />\n            </Tabs>\n            <LineChart\n                width={isMobile ? 300 : 600}\n                height={300}\n                data={lineData}\n                margin={{\n                    top: 10, right: 30, left: 20, bottom: 5,\n                }}\n            >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"day\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Line type=\"monotone\" dataKey=\"close\" stroke=\"#8884d8\" activeDot={{ r: 8 }} />\n                <Line type=\"monotone\" dataKey=\"open\" stroke=\"#82ca9d\" />\n            </LineChart>\n        </>\n    )\n}\n\nexport default Graph;","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: flex-start;\n    margin: 1rem;\n    padding: 1rem;\n    \n`;\n\nconst Label = styled.span`\n    color: #9498a0;\n    font-size: 0.75rem;\n    margin-bottom: 0.25rem;\n`;\n\nconst Text = styled.span`\n\n`;\n\ninterface Props {\n    label: string;\n    text?: string\n}\nconst Item: React.FC<Props> = ({ label, text }) => {\n    return (\n        <Container>\n            <Label>{label}:</Label>\n            <Text>{text}</Text>\n        </Container>\n    )\n}\n\nexport default Item;","import React from 'react';\nimport { FlexColumn, FlexRow } from '../styled';\nimport Item from './Item';\n\ninterface Props {\n    info: any;\n}\n\nconst Card: React.FC<Props> = ({\n    info,\n}) => {\n    return (\n        <FlexColumn>\n            <FlexRow>\n                <Item label=\"Name\" text={info.name} />\n                <Item label=\"Symbol\" text={info.symbol} />\n                <Item label=\"Industry\" text={info.industry} />\n            </FlexRow>\n            <FlexRow>\n                <Item label=\"Market Cap\" text={info.marketCap} />\n                <Item label=\"P/E Ratio\" text={info.peRatio} />\n                <Item label=\"Profit Margin\" text={info.profitMargin} />\n            </FlexRow>\n            <FlexRow>\n                <Item label=\"Number of Shares\" text={info.sharesOutstanding} />\n                <Item label=\"Target Price\" text={info.targetPrice} />\n            </FlexRow>\n        </FlexColumn>\n    )\n}\n\nexport default Card;\n\n","import axios from \"axios\";\nconst {\n    REACT_APP_API_BASE,\n} = process.env;\n\n// This is where I would setup interceptors to alter whatever necessary (Authorization Headers, Error Handling, etc.)\n// Since this API accepts apikey as a queryParam, there is very little setup required here.\n\nexport const authedFetcher = axios.create({\n    baseURL: REACT_APP_API_BASE,\n});\n\n\n","import { authedFetcher } from './index';\nimport { strict as assert } from \"assert\";\n\nconst { REACT_APP_ACCESS_KEY } = process.env;\n\ninterface priceDataRes {\n    \"1. open\": string;\n    \"2. high\": string;\n    \"3. low\": string;\n    \"4. close\": string;\n    \"5. volume\": string;\n}\n\nexport interface DayPrice {\n    day: string;\n    open: number;\n    close: number;\n}\n\nexport interface Stock {\n    info: {\n        symbol: string;\n        name: string;\n        description: string;\n        industry: string;\n        marketCap: string;\n        ebitda: string;\n        peRatio: string;\n        profitMargin: string;\n        targetPrice: string;\n        annualHigh: string;\n        annualLow: string;\n        sharesOutstanding: string;\n    },\n    pricing: DayPrice[];\n}\n\nexport function transformPricingData(data: { [day: string]: priceDataRes }) {\n    return Object.keys(data).map(day => {\n        const currentDay = data[day];\n        return {\n            day,\n            open: parseInt(currentDay['1. open']),\n            close: parseInt(currentDay['4. close']),\n        }\n    });\n}\n\nexport async function getPrices(symbol: string) {\n    const { status, data } = await authedFetcher.get(`/query?function=TIME_SERIES_DAILY&symbol=${symbol}&apikey=${REACT_APP_ACCESS_KEY}`);\n    assert.equal(status, 200);\n    return transformPricingData(data['Time Series (Daily)']);\n}\n\nexport async function getInfo(symbol: string) {\n    const { status, data } = await authedFetcher.get(`/query?function=OVERVIEW&symbol=${symbol}&apikey=${REACT_APP_ACCESS_KEY}`);\n    assert.equal(status, 200);\n\n    if (data.Note) {\n       alert('🦄 limited to 5 API calls a minute')\n    }\n\n    return {\n        symbol: data.Symbol,\n        name: data.Name,\n        description: data.Description,\n        industry: data.Industry,\n        marketCap: data.MarketCapitalization,\n        ebitda: data.EBITDA,\n        peRatio: data.PERatio,\n        profitMargin: data.ProfitMargin,\n        targetPrice: data.AnalystTargetPrice,\n        annualHigh: data['52WeekHigh'],\n        annualLow: data['52WeekLow'],\n        sharesOutstanding: data.SharesOutstanding,\n    }\n}\n\nexport async function getStock(symbol: string): Promise<Stock> {\n    const resData = await Promise.all([getInfo(symbol), getPrices(symbol)]);\n    return {\n        info: resData[0],\n        pricing: resData[1],\n    };\n}","import useSWR from 'swr';\nimport { getStock }from '../api/stocks';\n\nexport function useStock(symbol: string) {\n\t// SWR is a caching library created by creator of NextJS (Think Apollo without GraphQL)\n\tconst { data, error } = useSWR(`/symbol/${symbol}`, () => getStock(symbol));\n\t// normally would add an event/socketlistener here \n\t// which would update the appropriate cached stock payload with swr's `mutate` function\n\t// but for the sake of this demo project that is unnecessary\n\treturn { data, error, isValid: !!data };\n}","import React from 'react';\nimport styled from 'styled-components';\n\nimport Loader from '../Loader';\nimport Graph from './Graph';\nimport Card from './Card';\n\nimport { useStock } from '../../hooks/stocks';\nimport { useIsMobile } from '../../hooks/media-queries';\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    box-sizing: border-box;\n    background-color: #fff;\n    border-radius: 4px;\n    box-shadow: rgba(0, 41, 83, 0.2) 0px 1px 3px 0px;\n    position: relative;\n    padding: 1.125rem 1.5rem;\n    margin-bottom: 4rem;\n    top: 15vh;\n`;\n\ninterface Props {\n    symbol: string;\n}\n\nconst Stock: React.FC<Props> = ({ symbol }) => {\n    const { isValid, data } = useStock(symbol);\n    const isMobile = useIsMobile();\n    const isLoading = !data;\n\n    if (isLoading) {\n        return (\n            <Loader isLoading />\n        )\n    }\n\n    return (\n        <Container\n            className=\"animated fadeIn\"\n        >\n            <Card\n                info={data?.info}\n            />\n            { !isMobile &&\n                <Graph\n                    data={data?.pricing}\n                    isValid={isValid}\n                />\n            }\n        </Container>\n    )\n}\n\nexport default Stock;","import React from 'react';\n\n// hooks & types\nimport { Option } from '../api/search';\n\n// 3rd party apps\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\n// sample symbol data -> had to add this due to rate limiting on smart search\n// see src/hooks/search for my solution if rate limiting wasn't an issue\nimport options from '../res/nasdaq.json';\n\nconst initialState = { symbol: '', name: '' };\n\ninterface Props {\n    setSelectedStock: (newValue: any) => void;\n}\n\nconst Search: React.FC<Props> = ({\n    setSelectedStock,\n}) => (\n        <Autocomplete\n            options={options}\n            getOptionLabel={({ symbol, name }: Option) => `${name} (${symbol})`}\n            onChange={(option, value) => setSelectedStock(value)}\n            style={{ width: 300, position: 'absolute', top: '5vh' }}\n            disableClearable\n            renderInput={(params: any) =>\n                <TextField\n                    {...params}\n                    label=\"search stock\"\n                    variant=\"outlined\"\n                    onChange={() => setSelectedStock(initialState)}\n                />\n            }\n        />\n    )\n\nexport default Search;","import React, { useState } from 'react';\nimport { Container } from './styled';\nimport Stock from './Stock';\nimport Search from './Search';\n\nconst initialState = { symbol: '', name: '' };\n\nfunction App() {\n  const [stock, setSelectedStock] = useState(initialState);\n\n  return (\n    <Container>\n\n      <Search\n        setSelectedStock={setSelectedStock}\n      />\n\n      {stock.symbol !== '' && <Stock symbol={stock.symbol} />}\n\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}